这部分记录所有关中的收获与密码

//level 0



//bandit5   koReBOKuIDDepwhWk7jZC0RTdopnAYKh
find -h -size  1033


//bandit6   DXjZPULLxYr17uwoI01bNLQbtFemEgo7
find / -user ‘bandit7’ -group ‘bandit6’ -size 33c | grep -v denied
从根目录查找
查找符合权限符合大小的文件
没有权限则会拒绝进入
只有一个文件不会拒绝，就是密码文件


//bandit7   HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs
cat data.txt | grep millionth
文件查看与查找
grep是一个很强大的工具，用来过滤筛选信息
| 管道 (pipeline)，是 UNIX 系统，基础且重要的观念。连结上个指令的标准输出，做为下个指令的标准输入。


//bandit8   cvX2JJa4CFALtqS87jk27qwqGhBM9plV
cat data.txt | sort | uniq -u
这里需要找一行只出现了一次的字符
需要先对文件进行划分，然后筛掉重复的信息
sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。
sort的-u选项，它的作用很简单，就是在输出行中去除重复行。
sort的-r选项，sort默认的排序方式是升序，如果想改成降序，就加个-r就搞定了。
sort的-o选项，由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如sort filename > newfile。
              但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。
sort的-n选项，你有没有遇到过10比2小的情况。我反正遇到过。出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，
              显然1小，所以就将10放在2前面喽。这也是sort的一贯作风。我们如果想改变这种现状，就要使用-n选项，来告诉sort，“要以数值来排序”！
sort的-t选项和-k选项，这个文件有三列，列与列之间用冒号隔开了，我想以第二列来排序，如何利用sort实现？sort提供了-t选项，
              后面可以设定间隔符，指定了间隔符之后，就可以用-k来指定列数了。sort -n -k 2 -t : facebook.txt
其他的sort常用选项
-f会将小写字母都转换为大写字母来进行比较，亦即忽略大小写
-c会检查文件是否已排好序，如果乱序，则输出第一个乱序的行的相关信息，最后返回1
-C会检查文件是否已排好序，如果乱序，不输出内容，仅返回1
-M会以月份来排序，比如JAN小于FEB等等
-b会忽略每一行前面的所有空白部分，从第一个可见字符开始比较。
uniq 命令用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用。
uniq 可检查文本文件中重复出现的行列。
-c或--count 在每列旁边显示该行重复出现的次数。
-d或--repeated 仅显示重复出现的行列。
-f<栏位>或--skip-fields=<栏位> 忽略比较指定的栏位。
-s<字符位置>或--skip-chars=<字符位置> 忽略比较指定的字符。
-u或--unique 仅显示出一次的行列。
-w<字符位置>或--check-chars=<字符位置> 指定要比较的字符。


//bandit9   UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR
cat data.txt | strings | grep =
strings命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 
strings命令对识别随机对象文件很有用


//bandit10  truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk
cat data.txt | base64 -d
使用base64进行解码


//bandit11  IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR
cat data.txt | tr [a-z] [n-za-m] | tr [A-Z][N-ZA-M]
用tr命令替换字符，把所有字符推后13位

//bandit12  5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu
无权在原始目录操作，必须先创建新目录，把文件拷贝进去
用cp data /tmp/。。。
然后用xxd将其输出为压缩文件，即xxd -r data.txt data
然后根据文件头判断它是什么类型的压缩文件，用xxd data | head命令查看文件头
0x1f8b开头的为gzip文件，注意先将文件名重命名出.gz后缀
gzip -d data.gz
若文件头为0x425a则为bz2文件，重命名为.bz2
bzip2 -d data.bz2
否则为tar文件，重命名为.tar
tar -xvf data.tar
如此循环重复若干次，终于有一次你会发现自己解压出来的文件是密码。



//bandit13  8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL
这一关需要用到ssh，在bandit13下通过ssh登录bandit14，然后在bandit14中读取14的密码
先用提供的sshkey.private私钥文件进行bandit14的登录
ssh -i sshkey.private bandit14@localhost
ssh命令，[-i identity_file]
加上-i参数后可以添加身份文件，比如私钥文件



//bandit14  4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
这一关用telnet命令，连接到30000端口
telnet localhost 30000
然后连接上以后把bandit14的密码发过去就可以得到返回的新密码
也可以用nc命令
nc localhost 30000



//bandit15  BfMYroe26WYalil77FoDi9qh59eK5xNr
这一关用到一个强大的工具：openssl
openssl s_client -connect localhost:30001
可以直接用上面的命令，我们作为客户端和ssl服务器进行交互，把密码发送过去就可以获得下一关的密码
也可以加-ign_eof或者-quiet参数
前者用来保持和服务器的连接，保证收到回复的密码之后服务不会断开，防止看不到密码就退出
后者用来精简界面，屏蔽掉证书信息等
亲测不需要这两个参数影响不大
s_client为一个SSL/TLS客户端程序，与s_server对应，它不仅能与s_server进行通信，也能与任何使用ssl协议的其他服务程序进行通信。用法如下：
openssl s_client [-host host] [-port port] [-connect host:port] [-verify depth] [-cert filename] [-certform DER|PEM] 
                 [-key filename] [-keyform DER|PEM] [-pass arg] [-CApath directory] [-CAfile filename] [-reconnect]
                 [-pause] [-showcerts] [-debug] [-msg] [-state] [-nbio_test] [-nbio][-crlf] [-ign_eof] [-no_ign_eof] 
                 [-quiet] [-ssl2] [-ssl3] [-tls1_1] [-tls1_2] [-tls1] [-dtls1] [-no_ssl2][-no_ssl3] [-no_tls1] [-no_tls1_1] 
                 [-no_tls1_2] [-bugs] [-cipher cipherlist] [-starttls protocol] [-engine id] [-tlsextdebug] [-no_ticket] 
                 [-sess_out filename] [-sess_in filename] [-rand file(s)]   




//bandit16  cluFn7wTiGryunymYOu4RcffSxQluehd
这一关首先要用端口扫描工具对31000-32000进行扫描，查看哪些处于监听状态
nmap -p 31000-32000 localhost
然后会得到以下内容：
Not shown: 999 closed ports
PORT      STATE    SERVICE
31518/tcp filtered unknown
31790/tcp open     unknown
可以看到只有31790处于开放状态
接下来用上一关的工具进行ssl连接：echo cluFn7wTiGryunymYOu4RcffSxQluehd|openssl s_client -connect localhost:31790
得到一串回复：
-----BEGIN CERTIFICATE-----
MIICBjCCAW+gAwIBAgIEbSNYOzANBgkqhkiG9w0BAQUFADAUMRIwEAYDVQQDDAls
b2NhbGhvc3QwHhcNMTkxMTI2MDMzNzA3WhcNMjAxMTI1MDMzNzA3WjAUMRIwEAYD
VQQDDAlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMK/1fWi
3jCBydYlpk1fH5e96vpfdBFXtNXo8foquNUmvdFleKOUIFova64TG6KP6FVzEsV9
xvda7w7HWLYV9n6mX+QUTOFCRAGGrfLMyVtbzbn4B/QHaN6VUpF6nSeKys/H9LW8
jUrW2NaIrMXyOkmcrRHTNt96sGyIwYEOJfJfAgMBAAGjZTBjMBQGA1UdEQQNMAuC
CWxvY2FsaG9zdDBLBglghkgBhvhCAQ0EPhY8QXV0b21hdGljYWxseSBnZW5lcmF0
ZWQgYnkgTmNhdC4gU2VlIGh0dHBzOi8vbm1hcC5vcmcvbmNhdC8uMA0GCSqGSIb3
DQEBBQUAA4GBAFe9QZAhX0RNQIJ92lHIyuh85LlUGfKQPr4psE3tXdrcX9bV0Ici
PRSaFzX8hlBHcwtNmgJjmv5JmyFi7vyIx6JOKf4Eu+Hnxd0SQ2S8090PIM6cg8eS
2viDh3dTUeY7vIGqK/p/TXi3n4YVnpd6uzkCyGUmK+37FRjQOYbZvnt/
-----END CERTIFICATE-----
将这串密钥存成一个key.private文件（参考








//bandit17  



//bandit18  


//bandit19  



